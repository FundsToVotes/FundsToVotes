{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/haykal/Documents/FundsToVotes/src/PropublicaCandidateAPI.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Dropdown from 'react-dropdown'; // Finding the list of respresentatives for an address and showing a dropdown with a list of them\n\nexport function GoogleAPI() {\n  _s();\n\n  const [officials, setOfficials] = useState([\"\"]);\n  useEffect(() => {\n    fetch(\"https://civicinfo.googleapis.com/civicinfo/v2/representatives?address=15232%20NE%203rd%20Pl%20Bellevue%20Washington&key=AIzaSyCshtyTCb0erDxK5moA0nU3JT5crT5UWBQ\", {\n      method: \"GET\",\n      'Content-Type': 'application/json'\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n      let startIndexSen = result['offices'][2]['officialIndices'][0];\n      let endIndexSen = result['offices'][2]['officialIndices'][result['offices'][2]['officialIndices'].length - 1];\n      let offNames = new Array(endIndexSen - startIndexSen + 1);\n      let tempIndex = 0;\n\n      for (let i = startIndexSen; i <= endIndexSen; i++) {\n        offNames[tempIndex] = result['officials'][i].name;\n        tempIndex++;\n      }\n\n      setOfficials(offNames);\n      console.log(offNames);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: officials,\n      placeholder: \"Select a Candidate ..\",\n      onChange: e => oneRepVotes(e.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n} // Taking the senator name from the dropdown selection and allowing the specific API calls to happen\n\n_s(GoogleAPI, \"CnGTEyRBLacECulXmzkD+3Wp4Eo=\");\n\n_c = GoogleAPI;\n\nfunction oneRepVotes(name) {\n  let crpID = '';\n  let offID = ''; //useEffect(() => {\n\n  fetch(\"https://api.propublica.org/congress/v1/116/senate/members.json\", {\n    method: \"GET\",\n    headers: {\n      \"X-API-Key\": \"AYZVqN2QlJkxBhkzZ4JsFd9J3cZG1SuoWNee9QoS\"\n    }\n  }).then(res => res.json()).then(result => {\n    console.log(name);\n    console.log(result);\n    let nameArray = name.split(\" \");\n    let offFName = nameArray[0];\n    let offLName = nameArray[nameArray.length - 1];\n    let indexOfOfficial = result['results'][0]['members'].findIndex(x => x.first_name === offFName & x.last_name === offLName);\n    offID = result['results'][0]['members'][indexOfOfficial]['id'];\n    crpID = result['results'][0]['members'][indexOfOfficial]['crp_id'];\n    console.log(offID);\n    console.log(crpID);\n    return fetch(\"https://api.propublica.org/congress/v1/members/\" + offID + \"/votes.json\", {\n      method: \"GET\",\n      headers: {\n        \"X-API-Key\": \"AYZVqN2QlJkxBhkzZ4JsFd9J3cZG1SuoWNee9QoS\"\n      }\n    });\n  }).then(res => res.json()).then(result => {\n    console.log(result);\n    return fetch(\"http://www.opensecrets.org/api/?method=candSector&cid=\" + crpID + \"&cycle=2020&apikey=\" + \"36b9f9c9066b76213e6f0c51dd12a605\");\n  }).then(res => res.json()).then(result => {\n    console.log(result);\n  }); //}, [])\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: crpID\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleAPI\");","map":{"version":3,"sources":["/Users/haykal/Documents/FundsToVotes/src/PropublicaCandidateAPI.js"],"names":["useEffect","useState","Dropdown","GoogleAPI","officials","setOfficials","fetch","method","then","res","json","result","console","log","startIndexSen","endIndexSen","length","offNames","Array","tempIndex","i","name","e","oneRepVotes","value","crpID","offID","headers","nameArray","split","offFName","offLName","indexOfOfficial","findIndex","x","first_name","last_name"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Dropdown from 'react-dropdown';\n\n// Finding the list of respresentatives for an address and showing a dropdown with a list of them\nexport function GoogleAPI() {\n    const [officials, setOfficials] = useState([\"\"]);\n    useEffect(() => {\n        fetch(\"https://civicinfo.googleapis.com/civicinfo/v2/representatives?address=15232%20NE%203rd%20Pl%20Bellevue%20Washington&key=AIzaSyCshtyTCb0erDxK5moA0nU3JT5crT5UWBQ\", {\n            method: \"GET\",\n            'Content-Type': 'application/json',\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result);\n                    let startIndexSen = result['offices'][2]['officialIndices'][0];\n                    let endIndexSen = result['offices'][2]['officialIndices'][result['offices'][2]['officialIndices'].length - 1];\n                    let offNames = new Array(endIndexSen - startIndexSen + 1);\n                    let tempIndex = 0;\n                    for(let i = startIndexSen; i <= endIndexSen; i++) {\n                        offNames[tempIndex] = result['officials'][i].name;\n                        tempIndex++;\n                    }\n                    setOfficials(offNames);\n                    console.log(offNames);\n                }\n            )\n    }, [])\n\n    return (\n        <div>\n            <Dropdown options={officials} placeholder='Select a Candidate ..' onChange={e => oneRepVotes(e.value)}/>\n        </div>\n    )\n}\n\n// Taking the senator name from the dropdown selection and allowing the specific API calls to happen\nfunction oneRepVotes(name) {\n    let crpID = '';\n    let offID = '';\n    \n    //useEffect(() => {\n        fetch(\"https://api.propublica.org/congress/v1/116/senate/members.json\", {\n            method: \"GET\",\n            headers: {\n                \"X-API-Key\": \"AYZVqN2QlJkxBhkzZ4JsFd9J3cZG1SuoWNee9QoS\"\n            }\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(name);\n                    console.log(result);\n                    let nameArray = name.split(\" \");\n                    let offFName = nameArray[0];\n                    let offLName = nameArray[nameArray.length - 1];\n                    let indexOfOfficial = result['results'][0]['members'].findIndex(x => x.first_name === offFName & x.last_name === offLName);\n                    offID = result['results'][0]['members'][indexOfOfficial]['id'];\n                    crpID = result['results'][0]['members'][indexOfOfficial]['crp_id'];\n                    console.log(offID);\n                    console.log(crpID);\n                    return fetch(\"https://api.propublica.org/congress/v1/members/\" + offID + \"/votes.json\", {\n                        method: \"GET\",\n                        headers: {\n                            \"X-API-Key\": \"AYZVqN2QlJkxBhkzZ4JsFd9J3cZG1SuoWNee9QoS\"\n                        }\n                    });\n                }\n            )\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result);\n                    return fetch(\"http://www.opensecrets.org/api/?method=candSector&cid=\" + crpID + \"&cycle=2020&apikey=\" + \"36b9f9c9066b76213e6f0c51dd12a605\")\n                }\n            )\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result);\n                }\n            )\n    //}, [])\n    \n\n    return (\n        <p>{crpID}</p>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}